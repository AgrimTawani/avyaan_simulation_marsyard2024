#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Pose
import numpy as np
import tf_transformations as tf


def pose_to_matrix(pose: Pose):
    quaternion = [
        pose.orientation.x,
        pose.orientation.y,
        pose.orientation.z,
        pose.orientation.w,
    ]
    rotation_matrix = tf.quaternion_matrix(quaternion)
    translation_matrix = np.eye(4)
    translation_matrix[:3, 3] = [pose.position.x, pose.position.y, pose.position.z]
    return translation_matrix @ rotation_matrix


def matrix_to_pose(matrix):
    pose = Pose()
    pose.position.x, pose.position.y, pose.position.z = matrix[:3, 3]
    quaternion = tf.quaternion_from_matrix(matrix)
    (
        pose.orientation.x,
        pose.orientation.y,
        pose.orientation.z,
        pose.orientation.w,
    ) = quaternion
    return pose


class GroundTruthFilter(Node):
    def __init__(self):
        super().__init__("ground_truth_filter")

        self.declare_parameter("x_offset", 0.0)
        self.declare_parameter("y_offset", 0.0)
        self.declare_parameter("z_offset", 0.0)
        self.declare_parameter("yaw_offset", 0.0)

        x_offset = self.get_parameter("x_offset").value
        y_offset = self.get_parameter("y_offset").value
        z_offset = self.get_parameter("z_offset").value
        yaw_offset = self.get_parameter("yaw_offset").value

        rotation_offset = tf.rotation_matrix(yaw_offset, [0, 0, 1])
        translation_offset = np.eye(4)
        translation_offset[:3, 3] = [x_offset, y_offset, z_offset]
        self.offset = np.linalg.inv(rotation_offset @ translation_offset)

        self.publisher_ = self.create_publisher(Odometry, "ground_truth", 10)
        self.subscription = self.create_subscription(
            Odometry, "ground_truth_raw", self.ground_truth_raw_callback, 10
        )

    def ground_truth_raw_callback(self, msg: Odometry):
        frame = self.offset @ pose_to_matrix(msg.pose.pose)
        msg.pose.pose = matrix_to_pose(frame)
        self.publisher_.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = GroundTruthFilter()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
